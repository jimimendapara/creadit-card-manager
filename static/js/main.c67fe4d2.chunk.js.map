{"version":3,"sources":["validateInfo.js","http-common.js","services/card.service.js","UseForm.js","components/CreditCardForm.js","components/cards-list.component.js","App.js","index.js"],"names":["validateInfo","values","errors","creditCard","valid","number","cardNumber","expirationDate","cardExpiration","cvv","cardSecurityCode","cardholderName","cardName","show","variant","message","cname","cnumber","cexp","ccvv","trim","isValid","axios","create","baseURL","process","headers","http","get","id","data","post","put","delete","useForm","props","useState","focus","setValues","setErrors","handleChange","e","target","name","value","handleFocus","handleSubmit","preventDefault","CardDataService","then","response","window","location","reload","catch","console","log","CreditCardForm","className","cvc","expiry","focused","Form","onSubmit","Group","Control","type","maxLength","onInput","object","length","slice","placeholder","onChange","onFocus","Row","Col","minLength","Button","size","Alert","CardsList","cards","currentCard","currentIndex","state","setState","retrieveCard","getAll","useEffect","map","card","index","style","marginLeft","onClick","deleteCard","App","cardData","setCardData","fillForm","sendCard","onAddCard","onUpdateClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c67fe4d2.chunk.js","sourcesContent":["import valid from \"card-validator\";\n\nexport default function validateInfo(values) {\n  let errors = {};\n  let creditCard = valid.number(values.cardNumber);\n\n  creditCard.expirationDate = valid.expirationDate(values.cardExpiration);\n  creditCard.cvv = valid.cvv(values.cardSecurityCode);\n  creditCard.cardholderName = valid.cardholderName(values.cardName);\n/*   creditCard.postalCode = valid.postalCode(values.cardPostalCode); */\n\n  errors.show = true;\n  errors.variant = \"danger\";\n  errors.message = \"An unknown error occured. Please try again later\"\n  errors.cname = false;\n  errors.cnumber = false;\n  /* errors.ctype = false; */\n  errors.cexp = false;\n  errors.ccvv = false;\n /*  errors.cpostal = false; */\n\n//   if (values.cardPostalCode === null || !values.cardPostalCode.trim()) {\n//     errors.message = \"Credit card postal code is not complete\";\n//   } else if (creditCard.postalCode.isValid) {\n//     errors.cpostal = true;\n//   } else {\n//     errors.message = \"Credit card postal code is invalid\";\n//   }\n\n  //Card CVV expiration\n  if (values.cardSecurityCode === null || !values.cardSecurityCode.trim()) {\n    errors.message = \"Credit card CVC is not complete\";\n  } else if (creditCard.cvv.isValid) {\n    errors.ccvv = true;\n  } else {\n    errors.message = \"Credit card CVC is invalid\";\n  }\n\n  //Card Expiration Verification\n  if (values.cardExpiration === null || !values.cardExpiration.trim()) {\n    errors.message = \"Credit card expiration date is not complete\";\n  } else if (creditCard.expirationDate.isValid) {\n    errors.cexp = true;\n  } else {\n    errors.message = \"Credit card expiration date is invalid\";\n  }\n\n//   //Card Type Verification\n  /* if (\n    values.cardType === null ||\n    !values.cardType.trim() ||\n    creditCard.card === null\n  ) {\n    errors.message = \"Credit card type is not complete\";\n  } else if (\n    creditCard.card.type &&\n    creditCard.card.type.toUpperCase() === values.cardType.toUpperCase()\n  ) {\n    errors.ctype = true;\n  } else {\n    errors.message = \"Credit card type is invalid\";\n  } */\n\n  //Card Number Verification\n  if (values.cardNumber === null || !values.cardNumber.trim()) {\n    errors.message = \"Credit card number is not complete\";\n  } else if (creditCard.isValid) {\n    errors.cnumber = true;\n  } else {\n    errors.message = \"Credit card number is invalid\";\n  }\n\n  //Cardholder Name Verification\n  if (values.cardName === null || !values.cardName.trim()) {\n    errors.message = \"Cardholder name is not complete\";\n  } else if (creditCard.cardholderName.isValid) {\n    errors.cname = true;\n  } else {\n    errors.message = \"Cardholder name is invalid\";\n  }\n\n  if (\n    /* errors.ctype && */\n    errors.cname &&\n    errors.cnumber &&\n    errors.cexp &&\n    /* errors.cpostal && */\n    errors.ccvv\n  ) {\n    errors.variant = \"success\";\n    errors.message = \"Credit Card is valid\";\n  }\n\n  return errors;\n}","import axios from \"axios\";\n\nexport default axios.create({\n  \n  baseURL: process.env.REACT_APP_API_BASEURL,\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\n\nclass CardDataService {\n  getAll() {\n    return http.get(\"/cards\");\n  }\n\n  get(id) {\n    return http.get(`/cards/${id}`);\n  }\n\n  create(data) {\n    return http.post(\"/cards\", data);\n  }\n\n  update(id, data) {\n    return http.put(`/cards/${id}`, data);\n  }\n\n  delete(id) {\n    return http.delete(`/cards/${id}`);\n  }\n  \n}\n\nexport default new CardDataService();\n","import { useState } from \"react\";\nimport validateInfo from \"./validateInfo\";\nimport CardDataService from \"./services/card.service\";\n//import CardsList from \"./components/cards-list.component\";\n\n\nconst useForm = (props) => {\n  const [values, setValues] = useState({\n    cardName: \"\",\n    cardNumber: \"\",\n    /* cardType: '', */\n    cardExpiration: \"\",\n    cardSecurityCode: \"\",\n    /* cardPostalCode: '', */\n    focus: \"\",\n  });\n\n  const [errors, setErrors] = useState({});\n  \n\n  const handleFocus = (e) => {\n    setValues({\n      ...values,\n      focus: e.target.name === \"cardSecurityCode\" ? \"cvc\" : e.target.name,\n    });\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setErrors(validateInfo(values));\n\n    if (validateInfo(values).variant === \"success\") {\n      CardDataService.create(values)\n        .then((response) => {\n            window.location.reload();\n          //console.log(response.data);\n         \n        //   props.onAddCard(response.data);\n         \n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    }\n\n    \n    // CardDataService.getAll().then(response => {\n    //     setState({\n    //       cards: response.data\n    //     });\n    //     console.log(\"Data Listed\");\n    //   })\n\n    // const retrieveCard = () => {\n    //     CardDataService.getAll()\n    //       .then(response => {\n    //         setState({\n    //           cards: response.data\n    //         });\n    //         //console.log(response.data);\n    //       })\n    //       .catch(e => {\n    //         console.log(e);\n    //       });\n    //   };\n\n\n  };\n\n\n  \n\n  return { handleChange, handleFocus, handleSubmit, values, errors };\n};\n\nexport default useForm;\n","import React from \"react\";\nimport useForm from \"../UseForm\";\nimport { Button, Form, Alert, Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./CreditCardForm.css\";\nimport Cards from \"react-credit-cards\";\nimport \"react-credit-cards/es/styles-compiled.css\";\n\n\nconst CreditCardForm = (props) => {\n\n  const { handleChange, handleFocus, handleSubmit, values, errors } = useForm();\n   // console.log(props.sendCard);\n  // if(props.sendCard){\n  //   values.cardName = props.sendCard.cardData.cardName;\n  //   values.cardNumber = props.sendCard.cardData.cardNumber;\n  //   values.cardExpiration=props.sendCard.cardData.cardExpiration;\n  // }\n\n  const maxLengthCheck = (object) => {\n    if (object.target.value.length > object.target.maxLength) {\n     object.target.value = object.target.value.slice(0, object.target.maxLength)\n      }\n    }\n  \n\n  \n  return (\n   \n         \n      <div className=\"container\">\n        <div className=\"box justify-content-center align-items-center\">\n\n        <div className=\"creditCard\">\n          <Cards\n            cvc={values.cardSecurityCode}\n            expiry={values.cardExpiration}\n            focused={values.focus}\n            name={values.cardName}\n            number={values.cardNumber}\n          />\n          </div>\n\n\n          <div className=\"formDiv\">\n         \n\n\n          <Form onSubmit={handleSubmit} >\n            \n            <Form.Group>\n              <Form.Control\n                className=\"topmargin\"\n                type=\"number\"\n                maxLength = \"16\" \n                onInput={maxLengthCheck}\n                id=\"cardNumber\"\n                data-testid=\"cardNumber\"\n                name=\"cardNumber\"\n                placeholder=\"Card Number\"\n                value={values.cardNumber}\n                onChange={handleChange}\n                onFocus={handleFocus}\n                isValid={errors.cnumber}\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Control\n                type=\"text\"\n                id=\"cardName\"\n                data-testid=\"cardName\"\n                name=\"cardName\"\n                placeholder=\"Cardholder Name\"\n                value={values.cardName}\n                onChange={handleChange}\n                onFocus={handleFocus}\n                isValid={errors.cname}\n              />\n            </Form.Group>\n            <Row>\n              {/* <Col>\n                <Form.Group>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"cardType\"\n                    id=\"cardType\"\n                    data-testid=\"cardType\"\n                    placeholder=\"Card Type\"\n                    value={values.cardType}\n                    onChange={handleChange}\n                    onFocus={handleFocus}\n                    isValid={errors.ctype}\n                  />\n                </Form.Group>\n              </Col> */}\n              <Col>\n                <Form.Group>\n                  <Form.Control\n                    type=\"text\"\n                    id=\"cardExpiration\"\n                    data-testid=\"cardExpiration\"\n                    name=\"cardExpiration\"\n                    placeholder=\"MM/YY\"\n                    minLength=\"5\"\n                    maxLength=\"5\"\n                    value={values.cardExpiration}\n                    onChange={handleChange}\n                    onFocus={handleFocus}\n                    isValid={errors.cexp}\n                  />\n                </Form.Group>\n              </Col>\n            {/* </Row>\n            <Row> */}\n              <Col>\n                <Form.Group>\n                  <Form.Control\n                    type=\"number\"\n                    id=\"cardSecurityCode\"\n                    data-testid=\"cardSecurityCode\"\n                    name=\"cardSecurityCode\"\n                    placeholder=\"CVV\"\n                    minLength=\"3\"\n                    maxLength=\"3\"\n                    value={values.cardSecurityCode}\n                    onChange={handleChange}\n                    onFocus={handleFocus}\n                    isValid={errors.ccvv}\n                  />\n                </Form.Group>\n              </Col>\n              {/* <Col>\n                <Form.Group>\n                  <Form.Control\n                    type=\"text\"\n                    id=\"cardPostalCode\"\n                    data-testid=\"cardPostalCode\"\n                    name=\"cardPostalCode\"\n                    placeholder=\"Postal Code\"\n                    value={values.cardPostalCode}\n                    onChange={handleChange}\n                    onFocus={handleFocus}\n                    isValid={errors.cpostal}\n                  />\n                </Form.Group>\n              </Col> */}\n            </Row>\n            <Button\n              size={\"block\"}\n              data-testid=\"validateButton\"\n              id=\"validateButton\"\n              type=\"submit\"\n            >\n              Add Card\n            </Button>\n          </Form>\n          </div>\n          <Alert\n            id=\"alertMessage\"\n            data-testid=\"alertMessage\"\n            variant={errors.variant}\n            show={errors.show}\n          >\n            {errors.message}\n          </Alert>{\" \"}\n        </div>\n      </div>\n    \n  );\n};\n\nexport default CreditCardForm;","import React, {useState, useEffect} from 'react';\nimport  { Component } from \"react\";\nimport CardDataService from \"../services/card.service\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from 'react-bootstrap';\n\nfunction CardsList(props) {\n\n    const [state, setState] = useState({\n        cards: [],\n        currentCard: null,\n        currentIndex: -1,\n      });\n\n    function retrieveCard() {\n        CardDataService.getAll()\n          .then(response => {\n            setState({\n              cards: response.data\n            });\n            //console.log(response.data);\n          })\n          .catch(e => {\n            console.log(e);\n          });\n      };\n\n        useEffect(() => {\n        retrieveCard();\n           \n       }, []);\n\n\n       function deleteCard(e,id) {   \n           e.preventDefault();\n           //alert(id); \n        CardDataService.delete(id)\n          .then(response => {\n            \n            retrieveCard();\n            //this.props.history.push('/cards')\n          })\n          .catch(e => {\n            console.log(e);\n          });\n      }\n\n\n    //   function updateCard(e, id) {\n    //     e.preventDefault();\n    //     alert(id); \n        \n    //     CardDataService.update(\n    //       state.currentCard.id,\n    //       state.currentCard\n    //     )\n    //       .then(response => {\n    //         console.log(response.data);\n    //         setState({\n    //           message: \"The Card was updated successfully!\"\n    //         });\n    //       })\n    //       .catch(e => {\n    //         console.log(e);\n    //       });\n    //   }\n\n\n\n\n\n    return (\n      <div className=\"ml-5 mr-5\">\n\n           \n            {state &&\n            state.cards.map((card, index) => (\n                <div className=\"row border-bottom pb-2 pt-2\" key={index}>\n                    <div  className=\"col-sm-3\">{card.cardName}</div>\n                    <div className=\"col-sm-3\">{card.cardNumber}</div>\n                    <div className=\"col-sm-3\">{card.cardExpiration}</div>\n                    <div className=\"col-sm-3\"><Button\n                    style={{ marginLeft: \"auto\" }}\n                  variant=\"outline-danger\"\n                  onClick={(e) => deleteCard(e, card.id)}\n                >\n                  Delete\n                </Button></div>\n                </div>\n                 ))}\n\n           \n\n\n        {/* <ul className=\"list-group\">\n          {state &&\n            state.cards.map((card, index) => (\n              <li style={{ display: \"flex\" }} className={\"list-group-item \"} key={index}>\n                {card.cardName}  <br />\n                <span className=\"ml-4  pl-2\"> {card.cardNumber} </span>\n                <span className=\"ml-4  pl-2\"> {card.cardExpiration} </span>\n                \n                <Button\n                    style={{ marginLeft: \"auto\" }}\n                  variant=\"outline-danger\"\n                  onClick={(e) => deleteCard(e, card.id)}\n                >\n                  Delete\n                </Button> */}\n\n                {/* <Button variant=\"outline-danger\" onClick={e => props.onUpdateClick(e, card)}>Update</Button> */}\n              {/* </li>\n            ))}\n        </ul> */}\n      </div>\n    );\n}\n\nexport default CardsList;\n","import CreditCardForm from \"./components/CreditCardForm\";\n//import { Switch, Route, Link } from \"react-router-dom\";\nimport {useState} from 'react';\n\n\n\n//import AddCard from \"./components/add-card.component\";\n//import Card from \"./components/card.component\";\nimport CardsList from \"./components/cards-list.component\";\n\nfunction App() {\nconst [cardData, setCardData] = useState();\nconsole.log(cardData +\"thisis app\");\n\n//const [setList, list] = useState([])\n\n\nfunction fillForm(e, cardData){\n      e.preventDefault();\n      setCardData ({\n        cardData: cardData\n      } );\n      console.log(\"card data coming from update button\",cardData);\n}\n\n  return (\n    <div >\n     \n      <CreditCardForm sendCard={cardData}  onAddCard={fillForm}/>\n      <CardsList onUpdateClick={fillForm} />\n\n      <div>\n        {/* <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          \n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/cards\"} className=\"nav-link\">\n                Cards\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav> */}\n\n        <div className=\"container mt-3\">\n          {/* <Switch>\n            <Route exact path={[\"/\", \"/cards\"]} component={CardsList} />\n            <Route exact path=\"/add\" component={AddCard} />\n            <Route path=\"/tutorials/:id\" component={Card} />\n          </Switch> */}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n<BrowserRouter>\n    <App />\n  </BrowserRouter>,\n document.getElementById('root'));\n\n\n"],"sourceRoot":""}